version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_business_assistant_db
    environment:
      POSTGRES_DB: ai_business_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_business_network

  # Redis for Vector Search and Caching
  redis:
    image: redis:7-alpine
    container_name: ai_business_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_business_network

  # FastAPI Application
  app:
    build: .
    container_name: ai_business_assistant_app
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ai_business_assistant
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # API Keys (set these in .env file)
      GLADIA_API_KEY: ${GLADIA_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      BRIGHT_DATA_API_KEY: ${BRIGHT_DATA_API_KEY:-}
      TIGERDATA_API_KEY: ${TIGERDATA_API_KEY:-}
      
      # Application Settings
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      
      # Vector Search Settings
      VECTOR_DIMENSION: ${VECTOR_DIMENSION:-384}
      SIMILARITY_THRESHOLD: ${SIMILARITY_THRESHOLD:-0.7}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 10 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI application...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_business_network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_business_assistant_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ai-business-assistant.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ai_business_network
    profiles:
      - tools

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai_business_assistant_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ai_business_network
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  ai_business_network:
    driver: bridge
